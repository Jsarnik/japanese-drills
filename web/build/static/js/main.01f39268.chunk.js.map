{"version":3,"sources":["components/Player.js","components/QuestionsAndAnswers.js","components/Phrases.js","App.js","serviceWorker.js","index.js"],"names":["useAudio","url","audioItem","useRef","useState","Audio","playing","setPlaying","useEffect","current","play","pause","currentTime","addEventListener","removeEventListener","Player","controls","toggle","ref","src","type","onClick","style","color","red","green","BASE_URI","Items","data","isMobile","map","item","i","key","className","display","justifyContent","Questions","questions","question","index","answer","Answers","answers","Divider","light","audioUrl","audio","indexOf","ListItem","button","ListItemIcon","ListItemText","primary","Translations","values","selectedItem","setSelectedItem","_","val","isSelected","selectModel","QuestionsAndAnswers","List","Phrase","phrase","Phrases","App","setIsMobile","window","outerWidth","handleResize","passive","width","margin","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","id","ExpansionPanelDetails","phrases","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.01f39268.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport StopIcon from '@material-ui/icons/Stop';\nimport RecordVoiceOverIcon from '@material-ui/icons/RecordVoiceOver';\nimport { green, red } from '@material-ui/core/colors';\n\nconst useAudio = url => {\n  const audioItem = useRef(null);\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n\n  const toggle = () => setPlaying(!playing);\n\n  useEffect(() => {\n      if(audioItem.current !== null){\n            playing ? audioItem.current.play() : stopReset();\n      }\n    },\n    [playing]\n  );\n\n  function stopReset(){\n    audioItem.current.pause();\n    audioItem.current.currentTime = 0;\n  }\n\n  useEffect(() => {\n    audioItem.current.addEventListener('ended', () => setPlaying(false));\n    return () => {\n        audioItem.current.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, []);\n\n  return [playing, toggle, audioItem];\n};\n\nconst Player = ({ url, controls }) => {\n  const [playing, toggle, audioItem] = useAudio(url);\n\n  return controls ? (\n    <audio ref={audioItem} controls>\n        <source src={url} type=\"audio/mpeg\"/>\n    </audio>\n  ) : (\n    <div onClick={toggle}>\n        {\n            playing ? \n                <StopIcon style={{ color: red[500]}}></StopIcon>\n            :\n                <RecordVoiceOverIcon style={{ color: green[500]}}></RecordVoiceOverIcon>  \n        }\n        <audio ref={audioItem}>\n            <source src={url} type=\"audio/mpeg\"/>\n        </audio>\n    </div>\n  );\n};\n\nexport default Player;","import React, {useState, useEffect} from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport Divider from '@material-ui/core/Divider';\nimport Player from './Player';\nimport * as _ from 'lodash';\n\nconst defaultKeyShow = 'hiragana';\nconst BASE_URI = 'http://japanese-drills.s3.amazonaws.com/audio/';\n\nfunction QuestionsAndAnswers({data, isMobile}){\n\n    return (\n        <List>\n            <Items data={data} isMobile={isMobile}></Items>\n        </List>\n    )\n}\n\nfunction Items({data, isMobile}){\n    return data.map((item, i) => {\n        return (\n            <div key={i} className=\"question-container\" style={{display: 'flex', justifyContent: 'space-between'}}>\n                    <Questions questions={item.question} index={i} isMobile={isMobile}></Questions>\n                {\n                    item.answer ? \n                        <Answers answers={item.answer} index={i} isMobile={isMobile}></Answers>\n                    :\n                        null\n                }\n                <Divider light />\n            </div>\n        )\n    });\n}\n\nfunction Questions({questions, index, isMobile}){\n    const audioUrl = questions.audio ? questions.audio.indexOf('http') !== -1 ? questions.audio : `${BASE_URI}${questions.audio}` : null;\n    return (\n        <div className=\"question\">\n            <ListItem button className={'voice-button'}>\n                <ListItemIcon>\n                    <HelpOutlineIcon/>\n                </ListItemIcon>\n                <ListItemText primary={`${questions[defaultKeyShow]}`}/>\n                {\n                    audioUrl && !isMobile ?\n                        <Player url={audioUrl} controls={false}></Player>\n                    :\n                        null\n                }\n            </ListItem>\n            {\n                audioUrl && isMobile ?\n                    <ListItem>\n                        <Player url={audioUrl} controls={true}></Player>\n                    </ListItem>\n                :\n                    null\n            }\n            <Translations values={questions} index={index}></Translations>\n        </div>\n    )\n}\n\nfunction Answers({answers, index, isMobile}){\n    const audioUrl = answers.audio ? answers.audio.indexOf('http') !== -1 ? answers.audio : `${BASE_URI}${answers.audio}` : null;\n    return (\n        <div className=\"answer\">\n            <ListItem button className={'voice-button'}>\n                <ListItemIcon>\n                    <QuestionAnswerIcon/>\n                </ListItemIcon>\n                <ListItemText primary={`${answers[defaultKeyShow]}`}/>\n                {\n                    audioUrl && !isMobile ?\n                        <Player url={audioUrl} controls={false}></Player>\n                    :\n                        null\n                }\n            </ListItem>\n            {\n                audioUrl && isMobile ?\n                    <ListItem>\n                        <Player url={audioUrl} controls={true}></Player>\n                    </ListItem>\n                :\n                    null\n            }\n            <Translations values={answers} index={index}></Translations>\n        </div>\n    )\n}\n\nfunction Translations({values, index}){\n    const [selectedItem, setSelectedItem] = useState({index: -1, type: ''});\n\n    return _.map(values, (val, key) => {\n        if(key !== 'katakana' && key !== defaultKeyShow && key !== 'audio'){\n            let isSelected = selectedItem.index === index && selectedItem.type === key,\n                selectModel = {index: index, type: key};\n\n            return (\n                <ListItem className={`${isSelected ? 'selected' : ''}`} button onClick={()=>{setSelectedItem(isSelected ? {} : selectModel)}}>\n                    <ListItemIcon>\n                        <TranslateIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={`${isSelected ? val : key}`} />\n                    {   \n                        isSelected ?\n                            <VisibilityIcon/>\n                        :\n                            <VisibilityOffIcon/>\n                    }\n                </ListItem>\n            )\n        }\n    })\n}\n\nexport default QuestionsAndAnswers;\n","import React, {useState, useEffect} from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport FeedbackIcon from '@material-ui/icons/Feedback';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport Player from './Player';\nimport * as _ from 'lodash';\n\nconst defaultKeyShow = 'hiragana';\nconst BASE_URI = 'http://japanese-drills.s3.amazonaws.com/audio/';\n\nfunction Phrases({data, isMobile}){\n    return (\n        <List>\n            <Items data={data} isMobile={isMobile}></Items>\n        </List>\n    )\n}\n\nfunction Items({data, isMobile}){\n    return data.map((item, i) => {\n        return (\n            <div key={i} className=\"phrase-container\" style={{display: 'flex', justifyContent: 'space-between'}}>\n                <div className=\"phrase\">\n                    <Phrase phrase={item} index={i} isMobile={isMobile}></Phrase>\n                </div>\n                <Divider light />\n            </div>\n        )\n    });\n}\n\nfunction Phrase({phrase, index,isMobile}){\n    const audioUrl = phrase.audio ? phrase.audio.indexOf('http') !== -1 ? phrase.audio : `${BASE_URI}${phrase.audio}` : null;\n    return (\n        <div className=\"phrase\">\n            <ListItem button className={'voice-button'}>\n                <ListItemIcon>\n                    <FeedbackIcon/>\n                </ListItemIcon>\n                <ListItemText primary={`${phrase[defaultKeyShow]}`}/>\n                {\n                    audioUrl && !isMobile ?\n                        <Player url={audioUrl} controls={false}></Player>\n                    :\n                        null\n                }\n            </ListItem>\n            {\n                audioUrl && isMobile ?\n                    <ListItem>\n                        <Player url={audioUrl} controls={true}></Player>\n                    </ListItem>\n                :\n                    null\n            }\n            <Translations values={phrase} index={index}></Translations>\n        </div>\n    )\n}\n\nfunction Translations({values, index}){\n    const [selectedItem, setSelectedItem] = useState({index: -1, type: ''});\n\n    return _.map(values, (val, key) => {\n        if(key !== 'katakana' && key !== defaultKeyShow && key !== 'audio'){\n            let isSelected = selectedItem.index === index && selectedItem.type === key,\n                selectModel = {index: index, type: key};\n\n            return (\n                <ListItem className={`${isSelected ? 'selected' : ''}`} button onClick={()=>{setSelectedItem(isSelected ? {} : selectModel)}}>\n                    <ListItemIcon>\n                        <TranslateIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={`${isSelected ? val : key}`} />\n                    {   \n                        isSelected ?\n                            <VisibilityIcon/>\n                        :\n                            <VisibilityOffIcon/>\n                    }\n                </ListItem>\n            )\n        }\n    })\n}\n\nexport default Phrases;\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport QuestionsAndAnswers from './components/QuestionsAndAnswers';\nimport Phrases from './components/Phrases';\nimport data from './data.json';\n\nfunction App() {\n  const [isMobile, setIsMobile] = useState(false);\n\n  useEffect(() => {\n    setIsMobile(window.outerWidth <= 767);\n\n    const handleResize = () => {\n      setIsMobile(window.outerWidth <= 767);\n    };\n\n    window.addEventListener(\"resize\", handleResize, { passive: true });\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize, true);\n    }\n  },[]);\n\n  return (\n    <div className=\"App\" style={{width: '85%', margin: '0 auto'}}>\n      <ExpansionPanel>\n        <ExpansionPanelSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"questions\"\n          id=\"questions\"\n        >\n          Questions\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <QuestionsAndAnswers data={data.questions} isMobile={isMobile}></QuestionsAndAnswers>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n      \n      <ExpansionPanel>\n        <ExpansionPanelSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"questions\"\n          id=\"questions\"\n        >\n          Phrases\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Phrases data={data.phrases} isMobile={isMobile}></Phrases>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}