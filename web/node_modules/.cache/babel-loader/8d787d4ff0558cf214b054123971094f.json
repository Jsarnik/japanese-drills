{"ast":null,"code":"import * as types from './actionTypes';\nimport config from '../globals';\nimport axios from 'axios';\nexport function getCardsSuccess(cards) {\n  return {\n    type: types.GET_ALL_CARDS_SUCCESS,\n    cards\n  };\n}\nexport function getCardsFailure(error) {\n  return {\n    type: types.GET_ALL_CARDS_FAILURE,\n    error\n  };\n}\nexport function getCards() {\n  let url = `${config.baseApiUri}/api/getCards`;\n  let options = {};\n  return function (dispatch) {\n    return new Promise((resolve, reject) => {\n      axios.get(url, options).then(res => {\n        let _data = res.data;\n        let dispatchFn = _data.failed ? getCardsFailure(_data.failed, _data) : getCardsSuccess(_data);\n        dispatch(dispatchFn);\n        resolve(_data);\n      }).catch(e => {\n        dispatch(getCardsFailure(e.message));\n        reject(e.message);\n      });\n    });\n  };\n}\nexport function setCardSuccess(card) {\n  return {\n    type: types.SET_CARD_SUCCESS,\n    card\n  };\n}\nexport function setCardFailure(error) {\n  return {\n    type: types.SET_CARD_FAILURE,\n    error\n  };\n}\nexport function setCard(_card) {\n  let url = `${config.baseApiUri}/api/setCard`;\n  let options = {\n    card: _card\n  };\n  return function (dispatch) {\n    return new Promise((resolve, reject) => {\n      axios.post(url, options).then(res => {\n        debugger;\n        let _data = res.data;\n        let dispatchFn = _data.failed ? setCardFailure(_data.failed, _data) : setCardSuccess(_data);\n        dispatch(dispatchFn);\n        resolve(_data);\n      }).catch(e => {\n        debugger;\n        dispatch(setCardFailure(e.message));\n        reject(e.message);\n      });\n    });\n  };\n}\nexport function resetLessonSuccess(card) {\n  return {\n    type: types.SET_CARD_SUCCESS,\n    card\n  };\n}\nexport function resetLessonFailure(error) {\n  return {\n    type: types.SET_CARD_FAILURE,\n    error\n  };\n}\nexport function resetLesson(_card) {\n  let url = `${config.baseApiUri}/api/resetLesson`;\n  return function (dispatch) {\n    return new Promise((resolve, reject) => {\n      axios.get(url, {}).then(res => {\n        let _data = res.data;\n        let dispatchFn = _data.failed ? resetLessonFailure(_data.failed, _data) : resetLessonSuccess(_data);\n        dispatch(dispatchFn);\n        resolve(_data);\n      }).catch(e => {\n        dispatch(resetLessonFailure(e.message));\n        reject(e.message);\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/jsarnik-a/Documents/Projects/learn-japanese/web/src/actions/cardActions.js"],"names":["types","config","axios","getCardsSuccess","cards","type","GET_ALL_CARDS_SUCCESS","getCardsFailure","error","GET_ALL_CARDS_FAILURE","getCards","url","baseApiUri","options","dispatch","Promise","resolve","reject","get","then","res","_data","data","dispatchFn","failed","catch","e","message","setCardSuccess","card","SET_CARD_SUCCESS","setCardFailure","SET_CARD_FAILURE","setCard","_card","post","resetLessonSuccess","resetLessonFailure","resetLesson"],"mappings":"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","sourcesContent":["\nimport * as types from './actionTypes';\nimport config from '../globals';\nimport axios from 'axios';\n\nexport function getCardsSuccess(cards){\n    return {type: types.GET_ALL_CARDS_SUCCESS, cards};\n}\n\nexport function getCardsFailure(error){\n    return {type: types.GET_ALL_CARDS_FAILURE, error};\n}\n\nexport function getCards(){\n    let url = `${config.baseApiUri}/api/getCards`;\n    let options = {};\n    return function(dispatch){\n        return new Promise((resolve, reject)=>{\n            axios.get(url, options)\n            .then(res => {\n                let _data = res.data;\n                let dispatchFn = _data.failed ? getCardsFailure(_data.failed, _data) : getCardsSuccess(_data);\n                dispatch(dispatchFn);\n                resolve(_data);\n            }).catch(e => {\n                dispatch(getCardsFailure(e.message));\n                reject(e.message);\n            });\n        });\n    }\n}\n\nexport function setCardSuccess(card){\n    return {type: types.SET_CARD_SUCCESS, card};\n}\n\nexport function setCardFailure(error){\n    return {type: types.SET_CARD_FAILURE, error};\n}\n\nexport function setCard(_card){\n    let url = `${config.baseApiUri}/api/setCard`;\n    let options = {\n        card: _card\n    };\n    return function(dispatch){\n        return new Promise((resolve, reject)=>{\n            axios.post(url, options)\n            .then(res => {\n                debugger;\n                let _data = res.data;\n                let dispatchFn = _data.failed ? setCardFailure(_data.failed, _data) : setCardSuccess(_data);\n                dispatch(dispatchFn);\n                resolve(_data);\n            }).catch(e => {\n                debugger;\n                dispatch(setCardFailure(e.message));\n                reject(e.message);\n            });\n        });\n    }\n}\n\nexport function resetLessonSuccess(card){\n    return {type: types.SET_CARD_SUCCESS, card};\n}\n\nexport function resetLessonFailure(error){\n    return {type: types.SET_CARD_FAILURE, error};\n}\n\nexport function resetLesson(_card){\n    let url = `${config.baseApiUri}/api/resetLesson`;\n    return function(dispatch){\n        return new Promise((resolve, reject)=>{\n            axios.get(url, {})\n            .then(res => {\n                let _data = res.data;\n                let dispatchFn = _data.failed ? resetLessonFailure(_data.failed, _data) : resetLessonSuccess(_data);\n                dispatch(dispatchFn);\n                resolve(_data);\n            }).catch(e => {\n                dispatch(resetLessonFailure(e.message));\n                reject(e.message);\n            });\n        });\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}